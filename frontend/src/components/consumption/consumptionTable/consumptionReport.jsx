import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { saveAs } from "file-saver";
import logo from "../../../assets/logo/TidyHome_Logo.png";

export const generatePDF = (consumptions) => {
  const doc = new jsPDF();

  // Get page width for centering calculations
  const pageWidth = doc.internal.pageSize.getWidth();

  // Add logo (centered)
  const logoWidth = 20;
  const logoHeight = 17;
  const logoXOffset = (pageWidth - logoWidth) / 2;
  doc.addImage(logo, "PNG", logoXOffset, 10, logoWidth, logoHeight);

  // Add title (centered)
  doc.setFontSize(18);
  doc.setFont("helvetica", "bold");
  const title = "Consumption Report";
  const titleWidth = doc.getTextWidth(title);
  const titleXOffset = (pageWidth - titleWidth) / 2;
  doc.text(title, titleXOffset, 40);

  // Add report details (centered)
  doc.setFontSize(12);
  doc.setFont("helvetica", "normal");
  const generatedOn = `Generated on: ${new Date().toLocaleDateString()}`;
  const totalRecords = `Total Records: ${consumptions.length}`;
  const generatedOnWidth = doc.getTextWidth(generatedOn);
  const totalRecordsWidth = doc.getTextWidth(totalRecords);
  const generatedOnXOffset = (pageWidth - generatedOnWidth) / 2;
  const totalRecordsXOffset = (pageWidth - totalRecordsWidth) / 2;
  doc.text(generatedOn, generatedOnXOffset, 50);
  doc.text(totalRecords, totalRecordsXOffset, 60);

  // Define table columns
  const tableColumns = [
    "Product Name",
    "Amount Used",
    "Item Type",
    // "User",
    "Date",
    "Remaining Stock",
    "Notes",
  ];
  const tableRows = consumptions.map((item) => [
    item.product_name || "-",
    item.amount_used || "-",
    item.item_type || "-",
    // item.user?.name || "Unknown User",
    item.date ? new Date(item.date).toLocaleDateString() : "-",
    item.remaining_stock || "-",
    item.notes || "-",
  ]);

  // Add table using autoTable
  autoTable(doc, {
    head: [tableColumns],
    body: tableRows,
    startY: 70,
    theme: "grid",
    headStyles: { fillColor: [33, 37, 41], textColor: [255, 255, 255] },
    alternateRowStyles: { fillColor: [240, 240, 240] },
    styles: { fontSize: 10, cellPadding: 3 },
  });

  // Add footer
  const pageCount = doc.internal.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.text(
      `Page ${i} of ${pageCount}`,
      doc.internal.pageSize.width - 30,
      doc.internal.pageSize.height - 10
    );
    doc.text(
      "Generated by xAI Consumption Management",
      10,
      doc.internal.pageSize.height - 10
    );
  }

  // Save PDF
  doc.save("Consumption_Report.pdf");
};

export const generateCSV = (consumptions) => {
  const headers = [
    "Product Name",
    "Amount Used",
    "Item Type",
    // "User",
    "Date",
    "Remaining Stock",
    "Notes",
  ];
  const rows = consumptions.map((item) => [
    `"${item.product_name || "-"}"`,
    item.amount_used || "-",
    `"${item.item_type || "-"}"`,
    // `"${item.user?.name || "Unknown User"}"`,
    item.date ? new Date(item.date).toLocaleDateString() : "-",
    item.remaining_stock || "-",
    `"${item.notes || "-"}"`,
  ]);

  const csvContent = [
    headers.join(","),
    ...rows.map((row) => row.join(",")),
  ].join("\n");

  const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
  saveAs(blob, "Consumption_Report.csv");
};
